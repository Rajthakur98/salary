# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_absolute_error

# Example synthetic dataset
data = {
    'Experience': [1, 3, 5, 7, 9, 11, 13, 15],
    'Education': ['Bachelors', 'Masters', 'PhD', 'Bachelors', 'Masters', 'PhD', 'Bachelors', 'Masters'],
    'Job Role': ['Developer', 'Developer', 'Manager', 'Manager', 'Analyst', 'Developer', 'Manager', 'Analyst'],
    'Location': ['Delhi', 'Mumbai', 'Delhi', 'Bangalore', 'Mumbai', 'Bangalore', 'Delhi', 'Mumbai'],
    'Salary': [30000, 50000, 70000, 90000, 110000, 130000, 150000, 170000]
}
df = pd.DataFrame(data)

# Feature and target split
X = df.drop('Salary', axis=1)
y = df['Salary']

# Identify categorical and numerical columns
categorical_cols = ['Education', 'Job Role', 'Location']
numerical_cols = ['Experience']

# Preprocessing for categorical data
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

# Preprocessing for numerical data
numerical_transformer = StandardScaler()

# Combine transformers into a column transformer
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_cols),
        ('cat', categorical_transformer, categorical_cols)
    ]
)

# Create the full pipeline
model_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(random_state=42))
])

# Set up hyperparameter tuning
param_grid = {
    'regressor__n_estimators': [100, 200],
    'regressor__max_depth': [None, 10, 20],
    'regressor__min_samples_split': [2, 5]
}

# GridSearchCV to find best model
grid_search = GridSearchCV(model_pipeline, param_grid, cv=3, scoring='r2', n_jobs=-1)
grid_search.fit(X, y)

# Best model evaluation
best_model = grid_search.best_estimator_

# Predicting and Evaluating
y_pred = best_model.predict(X)

print("RÂ² Score:", r2_score(y, y_pred))
print("Mean Absolute Error:", mean_absolute_error(y, y_pred))

# Predict on new data
new_data = pd.DataFrame({
    'Experience': [10],
    'Education': ['Masters'],
    'Job Role': ['Developer'],
    'Location': ['Bangalore']
})

predicted_salary = best_model.predict(new_data)
print("Predicted Salary:", predicted_salary[0])
